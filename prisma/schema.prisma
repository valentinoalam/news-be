// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  provider        String
  providerAccId   String?          @unique
  email           String           @unique
  name            String
  password        String?
  role            Role            @default(SUBSCRIBER)
  articles        Article[]
  comments        Comment[]
  profile         Profile?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  subscriptions   NewsletterSubscription[]
  analyticsEvents AnalyticsEvent[]

  @@map("users")
  Session Session[]
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?  @db.Text
  avatar      String?
  socialMedia Json?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}

model Article {
  id            String           @id @default(cuid())
  categoryId    String
  title         String
  slug          String           @unique
  content       Json            
  excerpt       String?          @db.Text
  published     Boolean          @default(false)
  authorId      String
  author        User             @relation(fields: [authorId], references: [id])
  category      Category         @relation(fields: [categoryId], references: [id])
  tags          Tag[]
  comments      Comment[]
  viewCount     Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  publishedAt   DateTime?
  updatedById   String?
  publishedById String?
  metadata      ArticleMetadata?
  revisions     ArticleRevision[]
  mediaItems    MediaItem[]
  analytics     AnalyticsEvent[]

  @@map("articles")
}

model ArticleRevision {
  id          String   @id @default(cuid())
  articleId   String
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  title       String
  content     Json
  excerpt     String?  @db.Text
  version     Int
  createdAt   DateTime @default(now())
  createdBy   String?
  changeLog   String?  @db.Text

  @@unique([articleId, version])
  @@map("article_revisions")
}
model ArticleMetadata {
  id          String   @id @default(cuid())
  articleId   String   @unique
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  seoTitle    String?
  seoDesc     String?  @db.Text
  keywords    String[]
  readingTime Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("article_metadata")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  articles    Article[]
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  newsletterSubscription NewsletterSubscription[]
  @@map("categories")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  articles    Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("tags")
}

model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  articleId String
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("comments")
}

model MediaItem {
  id          String    @id @default(cuid())
  articleId   String
  fileName    String
  fileSize    Int
  mimeType    String
  url         String
  alt         String?
  caption     String?   @db.Text
  isFeatured  Boolean   @default(false)
  article     Article   @relation(fields: [articleId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("media_items")
}

model NewsletterSubscription {
  id          String    @id @default(cuid())
  email       String    @unique
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  status      SubscriptionStatus @default(ACTIVE)
  categories  Category[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("newsletter_subscriptions")
}

model AnalyticsEvent {
  id          String   @id @default(cuid())
  eventType   String
  payload     Json
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  articleId   String?
  article     Article? @relation(fields: [articleId], references: [id])
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("analytics_events")
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  SUBSCRIBER
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  UNSUBSCRIBED
}